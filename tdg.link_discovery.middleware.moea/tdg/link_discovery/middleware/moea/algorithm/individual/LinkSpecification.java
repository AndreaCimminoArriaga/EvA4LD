package tdg.link_discovery.middleware.moea.algorithm.individual;

import java.util.Map;

import org.moeaframework.core.Variable;

import tdg.link_discovery.framework.algorithm.individual.AbstractSpecification;
import tdg.link_discovery.middleware.objects.Tree;


public class LinkSpecification extends AbstractSpecification<Tree> implements Variable{

	private static final long serialVersionUID = -472473749112001778L; // MOEA'S Autogenerated ID
	
	public LinkSpecification(Tree tree){
		super(tree);
	}
	
	public LinkSpecification(){
		this.specificationRepresentation = new Tree();
		randomize();
	}
	
	public Tree getLinkSpecificationTree() {
		return this.getSpecificationRepresentation();
	}

	public void setLinkSpecificationTree(Tree linkSpecification) {
		setSpecificationRepresentation(linkSpecification);
	}

	public Map<String,Integer> getStatistics(){
		return this.specificationRepresentation.getStatistics();
	}
	
	@Override
	public Variable copy() {
		LinkSpecification ls = null;
		try{
			ls = new LinkSpecification(this.specificationRepresentation.clone());
		}catch(Exception e){
			//e.printStackTrace();
			System.out.println("Error copiying "+this.getLinkSpecificationTree().toString());
		}
		return ls;
	}

	@Override
	public void randomize() {
		// creates a new random object, which is used to create the initial population
		System.out.println("randomize called");
	}



	

}
